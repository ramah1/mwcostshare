spring.datasource.platform=postgres
spring.datasource.driverClassName=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://localhost/costshare?currentSchema=costshare
spring.datasource.username=Michael
spring.datasource.password=michael
spring.jpa.generate-ddl=true
server.port = 8081
#db.schema=costshare

# The following should all trigger validation of (idle) connections 
# and when an exception occurs or the idle period has passed 
# the connections will be removed from the pool.
spring.datasource.tomcat.max-active=4
# specify the number of initial connections
spring.datasource.tomcat.initial-size=2
# specify the min and max number of idle connections
spring.datasource.tomcat.max-idle=4
spring.datasource.tomcat.min-idle=1
# To validate connection we need to specify a validation-query and when to validate. 
# As we want to validate periodically, 
# instead of when a connection is retrieved from the pool 
# (this to prevent broken connections in our pool).
spring.datasource.tomcat.test-while-idle=true
spring.datasource.tomcat.test-on-borrow=true
spring.datasource.tomcat.validation-query=SELECT 1
# Now that we are also validating while a connection is idle, 
# we need to specify how often we want to run this query 
# for the connections and when a connection is considered idle.
# defaults to 5000
spring.datasource.tomcat.time-between-eviction-runs-millis=5000
# defaults to 60000
spring.datasource.tomcat.min-evictable-idle-time-millis=60000